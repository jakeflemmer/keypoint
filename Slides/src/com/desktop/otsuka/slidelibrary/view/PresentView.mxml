<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:view="com.desktop.otsuka.slidelibrary.view.*"
		 >
	
	<!-- grey background -->
	<s:Rect width="1024" height="722" y = "45">
		<s:fill>
			<s:SolidColor color="0xdddddd" />
		</s:fill>
	</s:Rect>
	
	<!-- ======================================================================================
								PRESENT VIEW
	======================================================================================== -->
	<fx:Script>
		<![CDATA[
			import com.desktop.otsuka.slidelibrary.controller.PresentCommand;
			import com.desktop.otsuka.slidelibrary.controller.SlidesEvent;
			import com.desktop.otsuka.slidelibrary.controller.SlidesUtilities;
			import com.desktop.otsuka.slidelibrary.model.DatabaseModel;
			import com.desktop.otsuka.slidelibrary.view.skins.ForwardButtonSkin;
			import com.desktop.otsuka.slidelibrary.view.skins.RewindButtonSkin;
			
			import flash.utils.setTimeout;
			
			import mx.controls.Alert;
			import mx.controls.SWFLoader;
			import mx.core.UIComponent;
			
			public var seekTime :int = 0;
			[Bindable]
			public var playBtnEnabled:Boolean = true;
			[Bindable]
			public var pauseBtnEnabled:Boolean = false;
			[Bindable]
			public var nextBtnEnabled:Boolean = true;
			[Bindable]
			public var backBtnEnabled:Boolean = false;
			
			private const VIEW_NOTES:String = "VIEW NOTES";
			private const VIEW_SLIDE:String = "VIEW SLIDE";
			private var _stopProjector:PresentCommand = new PresentCommand ();
			
			private var _slides:Array; // slide objects from JSON sorted into sequence
			[Bindable]
			private var _slidesLength:uint;
			[Bindable]
			private var _index:uint = 0;
			private var _loadedSlidesMap:Object;
			
			private var _presentationObject:Object;
			
			[Bindable]
			private var presentationTitle:String;
			
			private var _titleSlideId:uint;
		//	private var _titleSlideSequence; //new Title Slide ID
			
			private var _screen:Screen;
			private var _screenBounds:Rectangle;
			
			private var projectorWindow:ProjectorWindow;
			private var swfsUnloadedCounter:uint = 0;
			
			private var slideIdBeingLoaded:uint;
			
			private var frameCounter:uint;
			
			private var lastSlideWasAVideo:Boolean = false;
			
			private var dimToggle:Boolean = false;
			
			private var stringPresentTest:PreviewView;
			
			//==============================================================================
			// INIT
			//==============================================================================
			
			public function init($slides:Array,$loadedSlidesMap:Object, $presentationObject:Object):void{
				_index = 0;
				_slides = theWantedSlidesOnly($slides);
				sortTheSlides();
				_loadedSlidesMap = $loadedSlidesMap;
				_slidesLength = _slides.length;
				_presentationObject = $presentationObject;
				lastSlideWasAVideo = false;
				
				var hasProjector:Boolean = startProjectorWindow(keyUpHandlers);
				if ( ! hasProjector )
				{
					setTimeout( function (o:Object=null):void{endPresentButton_clickHandler(null);},500);
					return;
				}
				
				stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandlers);
				
				showSlideButton_clickHandler(null); // otherwise it will show notes instead of slide
				
				pickOutTheTitleSlide();
				
				putASlideImageInTheMainWindow(getSlideBitmap());
				putASlideImageIntoTheNextThumbnailWindow(getSlideBitmap(1));
				putASlideImageIntoThePreviousThumbnailWindow(null); // clear it
				
				if ( dbModel.presentationIsCustomPresentation($presentationObject))
				{
					this.presentationTitle = $presentationObject.custom_title;
				}
				else
				{
					this.presentationTitle = $presentationObject.presentation_name;
				}
				enableNextAndPreviousButtonsAppropriately();
			}
			private function enableNextAndPreviousButtonsAppropriately():void{
				nextButton.enabled = (_index < _slidesLength - 1 ? true : false);
				previousButton.enabled = (_index > 0 ? true : false);
			}
			private function sortTheSlides():void{
				var testSlide:Object = _slides[0];
				if ( testSlide.customSequence > 0 )
				{
					_slides.sortOn("customSequence",Array.NUMERIC);
					
				}else{
					_slides.sortOn("sequence",Array.NUMERIC);
				}
			}
			private function theWantedSlidesOnly(allSlides:Array):Array{
				var onlyWantedSlides:Array = new Array();
				for ( var i:uint = 0 ; i < allSlides.length; i++ )
				{
					var slide:Object = allSlides[i];
					if ( slide.unwanted == false)
					{
						onlyWantedSlides.push(slide);
					}					
				}
				return onlyWantedSlides;				
			}
			
			//==============================================================================
			// DISPLAY THE SLIDES
			//==============================================================================
			
			private function putASlideImageInTheMainWindow(slideBitmap:Bitmap):void{
				
				mainPreviewWindow.source = slideBitmap;
				
				if ( !slideBitmap) return;
			
				// also update the notes
				var notes:String = dbModel.getSlideNotesFromSlideId( _slides[_index].slide_id );
				
				if ( notes )
				{
					notesTextArea.htmlText = notes;
				}
				
				// TITLE SLIDE
				var slideId:int;
				if ( dbModel.presentationIsCustomPresentation(_presentationObject) )
				{
					slideId = _slides[_index].sec_slide_id_plus_cust_pres_id as int;
				}else{
					slideId = _slides[_index].section_slide_id as int;	
				}
				
				//if ( slideId == _titleSlideSequence )
				if ( slideId == _titleSlideId )
				{
					if ( dbModel.presentationIsCustomPresentation(_presentationObject) )
					{
						if ( ! notesTextArea.visible )
						{
							initTheTitleWidget(mainPreviewWindow,false);	
						}else{
							titleSlideWidget.visible = false;							
						}
						// title slide is ONLY ever an image and never a swf or video -- sendProjectorSwfImageOrVideo();
						// yeah but lets just show the swf anyways for convenience
						//if ( projectorWindow) projectorWindow.displayImage(getSlideBitmap());
						sendProjectorSwfImageOrVideo();
						videoPlayer.visible = false;
						videoPlayerButtonsHGroup.visible = false;
						return;
					}
				}else{
					titleSlideWidget.visible = false;
					titleSlideWidgetForPresent.visible = false;
				}
				
				sendProjectorSwfImageOrVideo();
			}
			private function sendProjectorSwfImageOrVideo(fromReload:Boolean = false):void{
				projectorWindow.removeEventListener(Event.ENTER_FRAME, onProjectorWindowEnterFrame);
				if ( fromReload)
				{
					trace("from reload");
				}
				var slideObject:Object = _slides[_index];
				if ( SlidesUtilities.slideIsVideo(slideObject))
				{
					projectorWindow.displayVideo(getSlideFlvLocalPath(slideObject));
					videoPlayer.visible = true;
					videoPlayer.source = getSlideFlvLocalPath(slideObject);
					videoPlayer.play();
					videoPlayer.addEventListener(Event.COMPLETE, function (e:Event):void{
						playBtnEnabled = true;
						pauseBtnEnabled = false;
						backBtnEnabled = false;
						nextBtnEnabled = true;	
						seekTime = 0;
					});
					videoPlayerButtonsHGroup.visible = true;
					playBtnEnabled = false;
					pauseBtnEnabled = true;
					backBtnEnabled = false;
					nextBtnEnabled = true;					
				}
				else if ( SlidesUtilities.slideIsSwf(slideObject))
				{					
					//projectorWindow.displayImage(getSlideSwf());
					putSlideSwfInProjectorWindow();
					videoPlayer.visible = false;
					videoPlayerButtonsHGroup.visible = false;	
				}
				else
				{
					projectorWindow.displayImage(getSlideBitmap());
					videoPlayer.visible = false;
					videoPlayerButtonsHGroup.visible = false;
				}				
			}

			private function getSlideFlvLocalPath(slideObject:Object):String{
				var localPath:String = _loadedSlidesMap[slideObject.slide_id+"flv"] as String; 
				return localPath;
			}

			private function initTheTitleWidget(uic:UIComponent,takeParent:Boolean):void{ 
				
				titleSlideWidget.inEditMode = false;
				titleSlideWidget.makeTitleSlideWidgetMatchDimensionsOfUIC(uic,takeParent,_presentationObject.presentation_id as int,_presentationObject.custom_presentation_id as int);
				titleSlideWidget.visible = true;
				titleSlideWidget.loadTheTileSlideFromTheDatabase();
				titleSlideWidget.addEventListener("CLOSE_ME", function (e:Event):void{
					titleSlideWidget.visible = false;
				});
				
				titleSlideWidgetForPresent.inEditMode = false;
				titleSlideWidgetForPresent.makeTitleSlideWidgetMatchDimensionsOfUIC(uic,takeParent,_presentationObject.presentation_id as int,_presentationObject.custom_presentation_id as int);
				titleSlideWidgetForPresent.visible = true;
				titleSlideWidgetForPresent.loadTheTileSlideFromTheDatabase();
				titleSlideWidgetForPresent.addEventListener("CLOSE_ME", function (e:Event):void{
					titleSlideWidgetForPresent.visible = false;
				});
				
				projectorWindow.displayTitleSlideWidget(titleSlideWidgetForPresent);
			}
			private function putASlideImageIntoTheNextThumbnailWindow(slideBitmap:Bitmap):void{
				nextThumbnailWindow.source = slideBitmap;
			}
			private function putASlideImageIntoThePreviousThumbnailWindow(slideBitmap:Bitmap):void{
				previousThumbnailWindow.source = slideBitmap;
			}
			
			
			//======================================================================
			// PREVIOUS - NEXT CLICK HANDLERS
			//======================================================================
			
			protected function nextSlideButtonClickHandler(event:MouseEvent):void
			{	
				disableNextAndPreviousButtonsForFractionOfASecond();
				var oldIndex:uint = _index;
				var oldSlide:Object = _slides[oldIndex];
				if ( SlidesUtilities.slideIsVideo(oldSlide))
				{
					lastSlideWasAVideo = true;
				}else{
					lastSlideWasAVideo = false;
				}
				_index++;	
				putASlideImageInTheMainWindow(getSlideBitmap());
				putASlideImageIntoTheNextThumbnailWindow(getSlideBitmap(1));
				putASlideImageIntoThePreviousThumbnailWindow(getSlideBitmap(-1));
				dimToggle = false;
				projectorWindow.dimOverlay(dimToggle);
				//stopVideo();
				
			}
			
			protected function prevSlideButtonClickHandler(event:MouseEvent):void
			{
				disableNextAndPreviousButtonsForFractionOfASecond();
				var oldIndex:uint = _index;
				var oldSlide:Object = _slides[oldIndex];
				if ( SlidesUtilities.slideIsVideo(oldSlide))
				{
					lastSlideWasAVideo = true;
				}else{
					lastSlideWasAVideo = false;
				}
				_index--;				
				putASlideImageInTheMainWindow(getSlideBitmap());
				putASlideImageIntoTheNextThumbnailWindow(getSlideBitmap(1));
				if ( _index > 0 )
				{
					putASlideImageIntoThePreviousThumbnailWindow(getSlideBitmap(-1));
				}else{
					previousThumbnailWindow.source = null;
				}
				dimToggle = false;
				projectorWindow.dimOverlay(dimToggle);
				//stopVideo();
			}
			private function unloadTheSwfAfterMovingOffOfIt(oldIndex:uint):void{
				var slideObject:Object = _slides[oldIndex];
				if ( SlidesUtilities.slideIsVideo(slideObject))
				{
					//we don't have to reload
				}
				else if ( SlidesUtilities.slideIsSwf(slideObject))
				{
					unloadThisSwf(slideObject);				
				}
				else
				{
					//we don't have to reload
				}
			}			
			private function disableNextAndPreviousButtonsForFractionOfASecond():void{
				nextButton.enabled = false;
				previousButton.enabled = false;
				setTimeout(function ():void{
					nextButton.enabled = (_index < _slidesLength - 1 ? true : false);
					previousButton.enabled = (_index > 0 ? true : false);
				},1000);
				
			}
			private function unloadThisSwf(slideObject:Object):void{
				
				var slideId:uint = slideObject.slide_id;
				slideIdBeingLoaded = slideId;
				var alreadyLoaderLoader:SWFLoader = _loadedSlidesMap[slideId+"swf"];
				if ( ! alreadyLoaderLoader ) return;
				alreadyLoaderLoader.unloadAndStop();
				alreadyLoaderLoader = null;
				// now we just load every swf right when we want to see it
//				setTimeout(function ():void{
//					var loader:Loader = new Loader();
//					var localPath:String = _loadedSlidesMap[slideId+"swfPath"] as String;
//					var urlRequest:URLRequest = new URLRequest(localPath);			
//					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, fileLoaderHandler);
//					loader.load( urlRequest )
//				},100);
			}
//			private function fileLoaderHandler(event:Event):void{
//				
//				(event.target).removeEventListener(Event.COMPLETE, fileLoaderHandler);
//				
//				var object:Object = event.target.loader;
//				
//				_loadedSlidesMap[slideIdBeingLoaded+"swf"] = object;
//				
//				//var fromReload:Boolean = true;
//				//sendProjectorSwfImageOrVideo(fromReload);
//			}
			//======================================================================
			// SHOW SLIDES - NOTES CLICK HANDLERS
			//======================================================================
			
			protected function showSlideButton_clickHandler(event:MouseEvent):void
			{
				notesTextArea.visible = false;
				mainPreviewWindow.visible = true;
				showNotesButton.visible = true;
				showSlideButton.visible = false;
			}
			
			protected function showNotesButton_clickHandler(event:MouseEvent):void
			{
				mainPreviewWindow.visible = false;
				notesTextArea.visible = true;	
				showNotesButton.visible = false;
				showSlideButton.visible = true;
				titleSlideWidget.visible = false;
			}
			
			//======================================================================
			// FULL_SIZE PREVIEW
			//======================================================================
			
			protected function fullSizePreviewButton_clickHandler(event:MouseEvent):void
			{
				var slidesEvent:SlidesEvent = new SlidesEvent(SlidesEvent.NAVIGATE);
				slidesEvent.navigateToPage = SlidesEvent.FULL_SIZE_PREVIEW;
				slidesEvent.bitmap = getSlideBitmap();
				dispatchEvent(slidesEvent);		
				
				if ( titleSlideWidget.visible )
				{
					titleSlideWidget.inEditMode = false;
				}
			}
			
			//======================================================================
			// END PRESENTATION
			//======================================================================
			
			protected function endPresentButton_clickHandler(event:MouseEvent):void
			{
				projectorWindow.close();
				videoPlayer.visible=false;
				stopVideo();
				// go back to preview view
				var slidesEvent:SlidesEvent = new SlidesEvent(SlidesEvent.NAVIGATE);
				slidesEvent.navigateToPage = SlidesEvent.PREVIEW_PAGE;
				slidesEvent.slides = _slides;
				slidesEvent.loadedSlidesMap = _loadedSlidesMap;
				slidesEvent.presentationObject = _presentationObject;		
				dispatchEvent(slidesEvent);
				_stopProjector.stopProjectorWindow();

				
			}

			//======================================================================
			// WORKER FUNCTIONS
			//======================================================================
			private function pickOutTheTitleSlide():void{
				var lowestSequenceNumber:int = 10000;
				var i:uint;
				
				if ( dbModel.presentationIsCustomPresentation(_presentationObject) )
				{
					for ( i = 0 ; i < _slides.length; i++)
					{
						if ( _slides[i].sequence <= lowestSequenceNumber)
						{
							lowestSequenceNumber = _slides[i].sequence;
						//	_titleSlideSequence = _slides[i].sec_slide_id_plus_cust_pres_id;
							_titleSlideId = _slides[i].sec_slide_id_plus_cust_pres_id;
							
						}
					}
				}else{
					for ( i = 0 ; i < _slides.length; i++)
					{
						if ( _slides[i].sequence <= lowestSequenceNumber)
						{
							lowestSequenceNumber = _slides[i].sequence;
							_titleSlideId = _slides[i].section_slide_id;
							//_titleSlideSequence = _slides[i].sequence;
							
						}
					}	
				}
			}
			
			//======================================================================
			// GETTERS AND SETTERS
			//======================================================================
			
			private function getSlideBitmap(indexAdjustment:int = 0):Bitmap{
				if ( _index + indexAdjustment < 0 || _index + indexAdjustment > _slidesLength - 1)
				{
					return null;
				}
				var slideId:int = _slides[_index+indexAdjustment].slide_id as int;
				var slideBitmap:Bitmap = _loadedSlidesMap[slideId] as Bitmap;
				return slideBitmap;
			}
			private function getSlideSwf(indexAdjustment:int = 0):Object{
				if ( _index + indexAdjustment < 0 || _index + indexAdjustment > _slidesLength - 1)
				{
					return null;
				}
				var slideId:int = _slides[_index+indexAdjustment].slide_id as int;
				var slideSwfLoader:Object = _loadedSlidesMap[slideId+"swf"];
				if ( ! slideSwfLoader )
				{
					// we must be reloading this swf
					return null;
				}
				var slideSwf:Object = slideSwfLoader.content;
				return slideSwf;
			}
			private function putSlideSwfInProjectorWindow():void{
				var slideId:int = _slides[_index].slide_id as int;
				var newLoader:SWFLoader = new SWFLoader();
				var filePath:String = _loadedSlidesMap[slideId+"swfPath"];
				newLoader.addEventListener(Event.COMPLETE, newFileLoaderHandler);
				newLoader.load( filePath );
			}
			
			private function newFileLoaderHandler(event:Event):void{
				
				(event.target).removeEventListener(Event.COMPLETE, newFileLoaderHandler); 
				
				var swfLoader:SWFLoader = event.target as SWFLoader;//.loader;
				swfLoader.maintainAspectRatio = false;
				swfLoader.smoothBitmapContent = true;
				swfLoader.scaleContent = true;
				
				var slideId:int = _slides[_index].slide_id as int;
				_loadedSlidesMap[slideId+"swf"] = swfLoader;
				if ( lastSlideWasAVideo )
				{
					// dont project screen capture
				}else{
					projectorWindow.projectScreenCapture();
				}
				projectorWindow.receiveSwfLoaderBack(swfLoader);
				
				setTimeout(function():void{
					clickCatcher_clickHandler(null);	// make main preview window have latest content
				},10);
			}
			private function get dbModel():DatabaseModel{
				return DatabaseModel.getInstance();
			}		
			// =========================================================================
			// START PROJECTOR WINDOW    =============================================
			// =========================================================================
			
			public function startProjectorWindow(keyPressHandlers:Function):Boolean
			{
				
				
				var numberOfScreen:Array = Screen.screens;
				trace("single monitor"+numberOfScreen.length);
				/* if ( numberOfScreen.length < 2 )
				{
					trace("single monitor");
				//	Alert.show("You must connect computer to external display before being able to present","Alert");
					_screen= Screen.screens[0];
					_screenBounds = _screen.bounds;
					//Note have presentation view activated with one screen
					//Alert.show("You must connect computer to external display before being able to present","Alert");
					//isProjecting = false;
					//return false;  //Note 
		
				}			
				
				else{// init screen bounds
					_screen = Screen.screens[1];  // V@ Baby!!//Screen.mainScreen;
					_screenBounds = _screen.bounds;
				}
				 */
				_screen= Screen.screens[0];
				_screenBounds = _screen.bounds;
				
				projectorWindow = new ProjectorWindow();
				projectorWindow.systemChrome =  NativeWindowSystemChrome.NONE; //STANDARD
				
				projectorWindow.open();
				
				projectorWindow.nativeWindow.x = _screenBounds.x;
				projectorWindow.nativeWindow.y = _screenBounds.y;
				projectorWindow.nativeWindow.width = _screenBounds.width;
				projectorWindow.nativeWindow.height = _screenBounds.height;
				
				projectorWindow.imageWindow.width =  _screenBounds.width;
				projectorWindow.imageWindow.height =  _screenBounds.height;
				projectorWindow.group.width =  _screenBounds.width;
				projectorWindow.group.height =  _screenBounds.height;
				projectorWindow.videoPlayer.width =  _screenBounds.width;
				projectorWindow.videoPlayer.height =  _screenBounds.height;
				projectorWindow.alwaysInFront = true;
				
				
				projectorWindow.stage.scaleMode = StageScaleMode.NO_SCALE;
				projectorWindow.stage.align = StageAlign.TOP_LEFT;
				projectorWindow.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE; 
				
				projectorWindow.stage.addEventListener(KeyboardEvent.KEY_UP, keyPressHandlers);
				
				projectorWindow.init();
				projectorWindow.addEventListener(SlidesEvent.UPDATE_PREVIEWING_SCREEN,onUpdatePreviewingScreenWithCapturedProjectingScreen);

				projectorWindow.createDimOverlay();
				
				return true;
			}
			private function onUpdatePreviewingScreenWithCapturedProjectingScreen(se:SlidesEvent):void{
				trace("frameCounter : " + se.frameCounter);
				mainPreviewWindow.source = se.bitmap;
			}
			
			// =========================================================================
			// CLICK CATCHER HACK      =============================================
			// =========================================================================
			protected function clickCatcher_clickHandler(event:MouseEvent):void
			{
				if ( event ) event.stopImmediatePropagation();
								
				projectorWindow.removeEventListener(Event.ENTER_FRAME, onProjectorWindowEnterFrame);
				
				clickCatcher.visible = false;
				
				projectorWindow.addEventListener(SlidesEvent.SEND_SWF_FROM_PROJECTOR_TO_PREVIEW,getTheSwfFromTheProjector);
				projectorWindow.getTheSwfLoader();
			}
			private function getTheSwfFromTheProjector(se:SlidesEvent):void{
				projectorWindow.removeEventListener(SlidesEvent.SEND_SWF_FROM_PROJECTOR_TO_PREVIEW,getTheSwfFromTheProjector);
				
				var swfLdr:SWFLoader = se.swfLoader;
				
				if (! swfLdr ) return;	// it has the title slide or something other than a swf
				
				swfLdr.width = 700;
				swfLdr.height = 500;
				swfHoldingGroup.addElementAt(swfLdr,0);
				swfHoldingGroup.visible = true;
				
				trace("now preview screen has real swf.");
				
				setTimeout(
					function ():void{
						trace("sending real swf to projector");  
						var bmpd:BitmapData
						try{
							bmpd = new BitmapData(swfHoldingGroup.width,swfHoldingGroup.height);
						}catch(e:Error){
							trace(e);
							return;
						}
						// screen catch real swf while in preview screen
						bmpd.draw(swfHoldingGroup,null,null,null,null,true);	
						var bmp:Bitmap = new Bitmap(bmpd);
						mainPreviewWindow.source = bmp;
						
						//remove real swf from preview screen
						swfHoldingGroup.visible = false;
						swfHoldingGroup.removeElementAt(0);
						
						// send real swf to projector
						projectorWindow.receiveSwfLoaderBack(swfLdr);
						
						// start screen capturing from projector window again
						projectorWindow.addEventListener(Event.ENTER_FRAME, onProjectorWindowEnterFrame);
						
						setTimeout(function():void{
							clickCatcher.visible = true;
						//},( event ? 100 : 10));
						},100);
							
				//},(event ? 200 : 3000 ));
					},200);
			}
			
			private function onProjectorWindowEnterFrame(e:Event):void{
				
				var bmpd:BitmapData = new BitmapData(projectorWindow.group.width,projectorWindow.group.height);
				bmpd.draw(projectorWindow.group,null,null,null,null,true);	
				var bmp:Bitmap = new Bitmap(bmpd);
				mainPreviewWindow.source = bmp;
				
				
				 
				//return bmp;				
			}
			
			// =========================================================================
			// VIDEO PLAYER CONTROLS =============================================
			// =========================================================================
			public function stopVideo():void{
				playBtnEnabled = true;
				pauseBtnEnabled = false;
				videoPlayer.pause();
				projectorWindow.videoPlayer.pause();
			}
			public function playVideo():void{
				playBtnEnabled = false;
				pauseBtnEnabled = true;
				nextBtnEnabled = true;
				backBtnEnabled = true;
				videoPlayer.play();
				if(projectorWindow.visible){
					projectorWindow.videoPlayer.play();
				}
			}
			public function seekForward():void{
				if((seekTime + 20) >= videoPlayer.duration){
					nextBtnEnabled = false;
				}else{
					seekTime = seekTime + 20;
					videoPlayer.seek(seekTime);
					projectorWindow.videoPlayer.seek(seekTime);
				}
				backBtnEnabled = true;
			}
			public function seekBackward():void{
				if(!((seekTime - 20) <= 0)){
					seekTime = seekTime - 20;
					videoPlayer.seek(seekTime);
					projectorWindow.videoPlayer.seek(seekTime);
				}else{
					videoPlayer.seek(0);
					projectorWindow.videoPlayer.seek(0);
					backBtnEnabled = false;
				}
				nextBtnEnabled = true;
			}
			
			//======================================================================
			// KEYBOARD HANDLERS
			//======================================================================
			
			protected function keyUpHandlers(event:KeyboardEvent):void
			{
				switch( event.keyCode ) 
				{ 
					
					 case Keyboard.N:
						 if ( nextButton.enabled )
						 {
							 nextSlideButtonClickHandler(null);	
						 }						
						 break;
				 case Keyboard.SPACE:
						 if ( nextButton.enabled )
						 {
							 nextSlideButtonClickHandler(null);	
						 }						
						 break;
					 case Keyboard.ENTER:
						 if ( nextButton.enabled )
						 {
							 nextSlideButtonClickHandler(null);	
						 }						
						 break;
					case Keyboard.DOWN:
						if ( nextButton.enabled )
						{
							nextSlideButtonClickHandler(null);	
						}							
						break;
					case Keyboard.UP:
						if ( previousButton.enabled )
						{
							prevSlideButtonClickHandler(null);	
						}						
						break;
					case Keyboard.LEFT :
						if ( previousButton.enabled )
						{
							prevSlideButtonClickHandler(null);	
						}						
						break;
					case Keyboard.PAGE_UP:
						if ( previousButton.enabled )
						{
							prevSlideButtonClickHandler(null);	
						}						
						break;
					case Keyboard.DELETE:
						if ( previousButton.enabled )
						{
							prevSlideButtonClickHandler(null);	
						}						
						break;
					case Keyboard.BACKSPACE:
						if ( previousButton.enabled )
						{
							prevSlideButtonClickHandler(null);	
						}						
						break;
					case Keyboard.P:
						if ( previousButton.enabled )
						{
							prevSlideButtonClickHandler(null);	
						}						
						break;
					
					case Keyboard.RIGHT :
						if ( nextButton.enabled )
						{
							nextSlideButtonClickHandler(null);	
						}						
						break;
					  case Keyboard.PAGE_DOWN:
						if ( nextButton.enabled )
						{
							nextSlideButtonClickHandler(null);	
						}						
						break;
					case Keyboard.ESCAPE :
						dimToggle = false;
						if(projectorWindow.visible){
							projectorWindow.dimOverlay(dimToggle);
							projectorWindow.removeDimOverlay();
						}
						endPresentButton_clickHandler(null);
						break;

				}//end case
				
				/*======================================================
						DIM Window 
				=======================================================*/
				if(projectorWindow.visible == true){
					if(event.keyCode == Keyboard.B || event.keyCode == Keyboard.PERIOD){
				
						dimToggle = !dimToggle;
						
						projectorWindow.dimOverlay(dimToggle);
						if(videoPlayer.visible)
						{
							if(dimToggle){
								stopVideo();
							}
							else{
								playVideo();
							}
						}//end video playerDisplay
					}// test only if the projector window is invisible
					
				}// end of if case statement for the Dim control (BlackOut)
				
				/*======================================================
				Advance to next slide
				=======================================================*/
			/* 	
				if(event.keyCode == Keyboard.N || event.keyCode == Keyboard.PAGE_DOWN || event.keyCode == Keyboard.DOWN
				 	|| event.keyCode == Keyboard.RIGHT || event.keyCode == Keyboard.ENTER 
					|| event.keyCode == Keyboard.SPACE)
				   {
						if(projectorWindow.visible == true){
							if ( previousButton.enabled )
							{
								prevSlideButtonClickHandler(null);	
							}				 */
					//	}// test only if the projector window is invisible
					
				// }// end of if case statement for Advance to next slide
				
			
				/*======================================================
				Advance to Previous slide
				=======================================================*/
				
			//	if(event.keyCode == Keyboard.P || event.keyCode == Keyboard.PAGE_UP || event.keyCode == Keyboard.UP
			/* 		|| event.keyCode == Keyboard.LEFT || event.keyCode == Keyboard.BACKSPACE 
					|| event.keyCode == Keyboard.DELETE)
				{
					if(projectorWindow.visible == true){
						if ( nextButton.enabled )
						{
							nextSlideButtonClickHandler(null);	
						}				 */
			//		}// test only if the projector window is invisible
					
			//	}// end of if case statement for Advance to next slide
				
				
				
			}//end keyuphandlers for PresentView			
			
			
		]]>
	</fx:Script>
	
	<!-- =========  BACKGROUNDS  =========== -->
	
	
	
	<!-- top blue border -->
	<s:Image 
			 source= "@Embed('assets/images/top_blue_border.png')"
			 y = "-1"
			 mouseDown="(this.parentApplication as Slides).nativeWindow.startMove();"
			 />
	
	<s:Label id="slideCounterTitle"
			 text="{'Slide ' + (_index + 1) + ' / ' + _slidesLength}"
			 width="100%"
			 height="45"
			 y="20"
			 horizontalCenter="0"
			 fontSize="18"
			 color = "0xffffff"
			 textAlign="center"
			 mouseDown="(this.parentApplication as Slides).nativeWindow.startMove();"
			 />
	
	
	<s:Image id="leftButtonBackground"
			 source="@Embed('assets/images/left_graphic.png')"
			 x = "117"
			 y="645"
			 />
	
	<s:Image id="rightButtonBackground"
			 source="@Embed('assets/images/right_graphic.png')"
			 x = "663"
			 y="645"
			 />
	
	
	<!-- ==================================== -->
	<!-- =========  MAIN WINDOW  ============ -->
	<!-- ==================================== -->
	<!--s:Label id="doubleClickLabel" 
			 width="700" textAlign="center"
			 x = "162" y="80"
			 fontSize="17"
			 color="0x8B008B"
			 text="Note : Double Click To Advance Slide Build / Animation"			 
			 /-->
	
	<s:Group id="screenCatcherGroup" x="162" y="100" >
		
	<s:Image id="mainPreviewWindow"			
			 width="700" height="500"
			 fillMode="scale"
			 scaleMode="stretch"
			 smoothingQuality="high"
			 smooth="true"
			 />
		
		
	
	<!-- =========  TITLE SLIDE WIDGET  =========== -->
	
	<view:TitleSlideWidget id="titleSlideWidget" 
						   visible="false"
						   />
		
	<view:TitleSlideWidget id="titleSlideWidgetForPresent" 
						   visible="false"
						   includeInLayout="false"
						   />
	
	</s:Group>
	
	<s:Group id="swfHoldingGroup"
			 x="162" y="100">
		
	</s:Group>
	
	<mx:Canvas id="clickCatcher"
			   x="162" y="100"
			   width="700" height="500"
			   backgroundColor="0xffff00"
			   backgroundAlpha="0.01"				   
			   click="clickCatcher_clickHandler(event)"
			   />
	
	<!-- =========  VIDEO PLAYER   =========== -->
	
	<s:VideoDisplay id="videoPlayer"					
					includeInLayout="{videoPlayer.visible}"
					scaleMode="stretch"
					x="162" y="100"
					visible="false"
					width="700" height="500"
					/>
	
	<!-- =========  NOTES  =========== -->
	
	<mx:HTML id="notesTextArea"
				x="162" y="100"
				width="{mainPreviewWindow.width}" height="{mainPreviewWindow.height}"
				/>
	
	
	<!-- =========  THUMBNAIL WINDOWS =========== -->
	
	
	<s:Image id="previousThumbnailWindow"			 
			 y = "649"
			 x = "227"
			 width="133" height="100"
			 fillMode="scale"
			 scaleMode="stretch"
			 />
	
			<!-- =========  VIDEO PLAYER CONTROLS =========== -->
	
	<s:HGroup id="videoPlayerButtonsHGroup" horizontalCenter="0" y="664"
			  visible="false" includeInLayout="{videoPlayerButtonsHGroup.visible}">
		<s:Button id="playBtn" skinClass="com.desktop.otsuka.slidelibrary.view.skins.PlayButtonSkin" 
				  click="playVideo()" 
				  fontSize="28" fontWeight="bold" enabled="{playBtnEnabled}"/>
		<s:Button id="pauseBtn" skinClass="com.desktop.otsuka.slidelibrary.view.skins.PauseButtonSkin" 
				  click="stopVideo()"
				   fontSize="28" fontWeight="bold" enabled="{pauseBtnEnabled}"/>
		<s:Button id="nextBtn" skinClass="com.desktop.otsuka.slidelibrary.view.skins.ForwardButtonSkin" 
				  click="seekForward()" 
				   fontSize="28" fontWeight="bold" enabled="{nextBtnEnabled}" />
		<s:Button id="backBtn" skinClass="com.desktop.otsuka.slidelibrary.view.skins.RewindButtonSkin" 
				  click="seekBackward()"
				  fontSize="28" fontWeight="bold" enabled="{backBtnEnabled}"/>
	</s:HGroup>
	
	<s:Image id="nextThumbnailWindow"
			 y = "649"
			 x="664"
			 width="133" height="100"
			 fillMode="scale"
			 scaleMode="stretch"  
			 />
	
	<!--=================  NEXT - PREVIOUS BUTTONS  ===================== -->
	
	<s:Button id="previousButton"
			  skinClass="com.desktop.otsuka.slidelibrary.view.skins.PreviousButtonSkin"
			  y="650"
			  x = "{leftButtonBackground.x + 1}"
			  click="prevSlideButtonClickHandler(event)"
			  />
	
	<s:Button id="nextButton"
			  skinClass="com.desktop.otsuka.slidelibrary.view.skins.NextButtonSkin"
			  x="{rightButtonBackground.x + rightButtonBackground.width - nextButton.width - 1}"
			  y="650"
			  click="nextSlideButtonClickHandler(event)"
			  
			  />
	
	<!--=================  BUTTONS  ===================== -->
	
	
		<s:Button id="showNotesButton"			  
				  skinClass="com.desktop.otsuka.slidelibrary.view.skins.PresentShowNotesButtonSkin"
				  click="showNotesButton_clickHandler(event)"				  
				  y="10"
				  x = "820"
				  />
		
		<s:Button id="showSlideButton"
				  skinClass="com.desktop.otsuka.slidelibrary.view.skins.PresentShowSlideButtonSkin"
				  click="showSlideButton_clickHandler(event)"				  
				  visible="false"
				  y="10"
				  x = "820"
				  />
		
		<s:Button id="endPresentButton"
				  skinClass="com.desktop.otsuka.slidelibrary.view.skins.EndPresentationButtonSkin"
				  click="endPresentButton_clickHandler(event)"
				  y="10"
				  x = "20"
				  />
	
	
	
	
			  
	
</s:Group>
